{"version":3,"sources":["assets/scripts/components/Folds.js"],"names":["cc","Class","extends","Component","properties","_folds","onLoad","vv","initView","initEventHandler","initAllFolds","game","node","getChildByName","sides","i","length","sideName","sideRoot","folds","foldRoot","j","children","n","active","sprite","getComponent","Sprite","spriteFrame","push","hideAllFolds","k","f","self","on","data","initFolds","detail","seats","gameNetMgr","seatData","localIndex","getLocalIndex","seatindex","pre","mahjongmgr","getFoldPre","side","getSide","foldsSprites","index","setSpriteFrameByMJID","mjid","getSpriteFrameByMJID"],"mappings":"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","file":"unknown","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        _folds:null,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        if(cc.vv == null){\n            return;\n        }\n        \n        this.initView();\n        this.initEventHandler();\n        \n        this.initAllFolds();\n    },\n    \n    initView:function(){\n        this._folds = {};\n        var game = this.node.getChildByName(\"game\");\n        var sides = [\"myself\",\"right\",\"up\",\"left\"];\n        for(var i = 0; i < sides.length; ++i){\n            var sideName = sides[i];\n            var sideRoot = game.getChildByName(sideName);\n            var folds = [];\n            var foldRoot = sideRoot.getChildByName(\"folds\");\n            for(var j = 0; j < foldRoot.children.length; ++j){\n                var n = foldRoot.children[j];\n                n.active = false;\n                var sprite = n.getComponent(cc.Sprite); \n                sprite.spriteFrame = null;\n                folds.push(sprite);            \n            }\n            this._folds[sideName] = folds; \n        }\n        \n        this.hideAllFolds();\n    },\n    \n    hideAllFolds:function(){\n        for(var k in this._folds){\n            var f = this._folds[i];\n            for(var i in f){\n                f[i].node.active = false;\n            }\n        }\n    },\n    \n    initEventHandler:function(){\n        var self = this;\n        this.node.on('game_begin',function(data){\n            self.initAllFolds();\n        });  \n        \n        this.node.on('game_sync',function(data){\n            self.initAllFolds();\n        });\n        \n        this.node.on('game_chupai_notify',function(data){\n            self.initFolds(data.detail);\n        });\n        \n        this.node.on('guo_notify',function(data){\n            self.initFolds(data.detail);\n        });\n    },\n    \n    initAllFolds:function(){\n        var seats = cc.vv.gameNetMgr.seats;\n        for(var i in seats){\n            this.initFolds(seats[i]);\n        }\n    },\n    \n    initFolds:function(seatData){\n        var folds = seatData.folds;\n        if(folds == null){\n            return;\n        }\n        var localIndex = cc.vv.gameNetMgr.getLocalIndex(seatData.seatindex);\n        var pre = cc.vv.mahjongmgr.getFoldPre(localIndex);\n        var side = cc.vv.mahjongmgr.getSide(localIndex);\n        \n        var foldsSprites = this._folds[side];\n        for(var i = 0; i < foldsSprites.length; ++i){\n            var index = i;\n            if(side == \"right\" || side == \"up\"){\n                index = foldsSprites.length - i - 1;\n            }\n            var sprite = foldsSprites[index];\n            sprite.node.active = true;\n            this.setSpriteFrameByMJID(pre,sprite,folds[i]);\n        }\n        for(var i = folds.length; i < foldsSprites.length; ++i){\n            var index = i;\n            if(side == \"right\" || side == \"up\"){\n                index = foldsSprites.length - i - 1;\n            }\n            var sprite = foldsSprites[index];\n            \n            sprite.spriteFrame = null;\n            sprite.node.active = false;\n        }  \n    },\n    \n    setSpriteFrameByMJID:function(pre,sprite,mjid){\n        sprite.spriteFrame = cc.vv.mahjongmgr.getSpriteFrameByMJID(pre,mjid);\n        sprite.node.active = true;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}