{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "window",
    "io",
    "require",
    "Global",
    "cc",
    "Class",
    "extends",
    "Component",
    "statics",
    "ip",
    "sio",
    "isPinging",
    "fnDisconnect",
    "handlers",
    "addHandler",
    "event",
    "fn",
    "console",
    "log",
    "handler",
    "data",
    "JSON",
    "parse",
    "on",
    "connect",
    "fnConnect",
    "fnError",
    "self",
    "opts",
    "connected",
    "close",
    "key",
    "value",
    "startHearbeat",
    "lastRecieveTime",
    "Date",
    "now",
    "setInterval",
    "ping",
    "send",
    "stringify",
    "emit",
    "disconnect",
    "test",
    "fnResult",
    "xhr",
    "ret",
    "isonline",
    "arr",
    "split",
    "account",
    "vv",
    "userMgr",
    "sign",
    "port",
    "http",
    "sendRequest",
    "setTimeout",
    "abort"
  ],
  "mappings": ";;;;AAAA,IAAGA,OAAOC,EAAP,IAAa,IAAhB,EAAqB;AACjBD,WAAOC,EAAP,GAAYC,QAAQ,WAAR,CAAZ;AACH;;AAED,IAAIC,SAASC,GAAGC,KAAH,CAAS;AAClBC,aAASF,GAAGG,SADM;AAElBC,aAAS;AACLC,YAAG,EADE;AAELC,aAAI,IAFC;AAGLC,mBAAU,KAHL;AAILC,sBAAa,IAJR;AAKLC,kBAAS,EALJ;AAMLC,oBAAW,oBAASC,KAAT,EAAeC,EAAf,EAAkB;AACzB,gBAAG,KAAKH,QAAL,CAAcE,KAAd,CAAH,EAAwB;AACpBE,wBAAQC,GAAR,CAAY,WAAWH,KAAX,GAAmB,gCAA/B;AACA;AACH;;AAED,gBAAII,UAAU,SAAVA,OAAU,CAASC,IAAT,EAAc;AACxB;AACA,oBAAGL,SAAS,YAAT,IAAyB,OAAOK,IAAP,IAAgB,QAA5C,EAAqD;AACjDA,2BAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACH;AACDJ,mBAAGI,IAAH;AACH,aAND;;AAQA,iBAAKP,QAAL,CAAcE,KAAd,IAAuBI,OAAvB;AACA,gBAAG,KAAKT,GAAR,EAAY;AACRO,wBAAQC,GAAR,CAAY,uBAAuBH,KAAnC;AACA,qBAAKL,GAAL,CAASa,EAAT,CAAYR,KAAZ,EAAkBI,OAAlB;AACH;AACJ,SAzBI;AA0BLK,iBAAQ,iBAASC,SAAT,EAAmBC,OAAnB,EAA4B;AAChC,gBAAIC,OAAO,IAAX;;AAEA,gBAAIC,OAAO;AACP,gCAAe,KADR;AAEP,wCAAwB,IAFjB;AAGP,8BAAa,CAAC,WAAD,EAAc,SAAd;AAHN,aAAX;AAKA,iBAAKlB,GAAL,GAAWV,OAAOC,EAAP,CAAUuB,OAAV,CAAkB,KAAKf,EAAvB,EAA0BmB,IAA1B,CAAX;AACA,iBAAKlB,GAAL,CAASa,EAAT,CAAY,WAAZ,EAAwB,YAAU;AAC9BN,wBAAQC,GAAR,CAAY,cAAZ;AACH,aAFD;AAGA,iBAAKR,GAAL,CAASa,EAAT,CAAY,SAAZ,EAAsB,UAASH,IAAT,EAAc;AAChCO,qBAAKjB,GAAL,CAASmB,SAAT,GAAqB,IAArB;AACAJ,0BAAUL,IAAV;AACH,aAHD;;AAKA,iBAAKV,GAAL,CAASa,EAAT,CAAY,YAAZ,EAAyB,UAASH,IAAT,EAAc;AACnCH,wBAAQC,GAAR,CAAY,YAAZ;AACAS,qBAAKjB,GAAL,CAASmB,SAAT,GAAqB,KAArB;AACAF,qBAAKG,KAAL;AACH,aAJD;;AAMA,iBAAKpB,GAAL,CAASa,EAAT,CAAY,gBAAZ,EAA6B,YAAW;AACpCN,wBAAQC,GAAR,CAAY,gBAAZ;AACH,aAFD;;AAIA,iBAAI,IAAIa,GAAR,IAAe,KAAKlB,QAApB,EAA6B;AACzB,oBAAImB,QAAQ,KAAKnB,QAAL,CAAckB,GAAd,CAAZ;AACA,oBAAG,OAAOC,KAAP,IAAiB,UAApB,EAA+B;AAC3B,wBAAGD,OAAO,YAAV,EAAuB;AACnB,6BAAKnB,YAAL,GAAoBoB,KAApB;AACH,qBAFD,MAGI;AACAf,gCAAQC,GAAR,CAAY,uBAAuBa,GAAnC;AACA,6BAAKrB,GAAL,CAASa,EAAT,CAAYQ,GAAZ,EAAgBC,KAAhB;AACH;AACJ;AACJ;;AAED,iBAAKC,aAAL;AACH,SAnEI;;AAqELA,uBAAc,yBAAU;AACpB,iBAAKvB,GAAL,CAASa,EAAT,CAAY,WAAZ,EAAwB,YAAU;AAC9BN,wBAAQC,GAAR,CAAY,WAAZ;AACAS,qBAAKO,eAAL,GAAuBC,KAAKC,GAAL,EAAvB;AACH,aAHD;AAIA,iBAAKF,eAAL,GAAuBC,KAAKC,GAAL,EAAvB;AACA,gBAAIT,OAAO,IAAX;AACAV,oBAAQC,GAAR,CAAY,CAAZ;AACA,gBAAG,CAACS,KAAKhB,SAAT,EAAmB;AACfM,wBAAQC,GAAR,CAAY,CAAZ;AACAS,qBAAKhB,SAAL,GAAiB,IAAjB;AACA0B,4BAAY,YAAU;AAClBpB,4BAAQC,GAAR,CAAY,CAAZ;AACA,wBAAGS,KAAKjB,GAAR,EAAY;AACRO,gCAAQC,GAAR,CAAY,CAAZ;AACA,4BAAGiB,KAAKC,GAAL,KAAaT,KAAKO,eAAlB,GAAoC,KAAvC,EAA6C;AACzCP,iCAAKG,KAAL;AACH,yBAFD,MAGI;AACAH,iCAAKW,IAAL;AACH;AACJ;AACJ,iBAXD,EAWE,IAXF;AAYH;AACJ,SA7FI;AA8FLC,cAAK,cAASxB,KAAT,EAAeK,IAAf,EAAoB;AACrB,gBAAG,KAAKV,GAAL,CAASmB,SAAZ,EAAsB;AAClB,oBAAGT,QAAQ,IAAR,IAAiB,QAAOA,IAAP,yCAAOA,IAAP,MAAgB,QAApC,EAA8C;AAC1CA,2BAAOC,KAAKmB,SAAL,CAAepB,IAAf,CAAP;AACA;AACH;AACD,qBAAKV,GAAL,CAAS+B,IAAT,CAAc1B,KAAd,EAAoBK,IAApB;AACH;AACJ,SAtGI;;AAwGLkB,cAAK,gBAAU;AACX,iBAAKC,IAAL,CAAU,WAAV;AACH,SA1GI;;AA4GLT,eAAM,iBAAU;AACZb,oBAAQC,GAAR,CAAY,OAAZ;AACA,gBAAG,KAAKR,GAAL,IAAY,KAAKA,GAAL,CAASmB,SAAxB,EAAkC;AAC9B,qBAAKnB,GAAL,CAASmB,SAAT,GAAqB,KAArB;AACA,qBAAKnB,GAAL,CAASgC,UAAT;AACA,qBAAKhC,GAAL,GAAW,IAAX;AACH;AACD,gBAAG,KAAKE,YAAR,EAAqB;AACjB,qBAAKA,YAAL;AACA,qBAAKA,YAAL,GAAoB,IAApB;AACH;AACJ,SAvHI;;AAyHL+B,cAAK,cAASC,QAAT,EAAkB;AACnB,gBAAIC,MAAM,IAAV;AACA,gBAAI7B,KAAK,SAALA,EAAK,CAAS8B,GAAT,EAAa;AAClBF,yBAASE,IAAIC,QAAb;AACAF,sBAAM,IAAN;AACH,aAHD;;AAKA,gBAAIG,MAAM,KAAKvC,EAAL,CAAQwC,KAAR,CAAc,GAAd,CAAV;AACA,gBAAI7B,OAAO;AACP8B,yBAAQ9C,GAAG+C,EAAH,CAAMC,OAAN,CAAcF,OADf;AAEPG,sBAAKjD,GAAG+C,EAAH,CAAMC,OAAN,CAAcC,IAFZ;AAGP5C,oBAAGuC,IAAI,CAAJ,CAHI;AAIPM,sBAAKN,IAAI,CAAJ;AAJE,aAAX;AAMAH,kBAAMzC,GAAG+C,EAAH,CAAMI,IAAN,CAAWC,WAAX,CAAuB,mBAAvB,EAA2CpC,IAA3C,EAAgDJ,EAAhD,CAAN;AACAyC,uBAAW,YAAU;AACjB,oBAAGZ,GAAH,EAAO;AACHA,wBAAIa,KAAJ;AACAd,6BAAS,KAAT;AACH;AACJ,aALD,EAKE,IALF;AAMA;;;;;;;;;;;;;;;;;;;;AAoBH;AAlKI;AAFS,CAAT,CAAb",
  "file": "unknown",
  "sourcesContent": [
    "if(window.io == null){\r\n    window.io = require(\"socket-io\");\r\n}\r\n \r\nvar Global = cc.Class({\r\n    extends: cc.Component,\r\n    statics: {\r\n        ip:\"\",\r\n        sio:null,\r\n        isPinging:false,\r\n        fnDisconnect:null,\r\n        handlers:{},\r\n        addHandler:function(event,fn){\r\n            if(this.handlers[event]){\r\n                console.log(\"event:\" + event + \"' handler has been registered.\");\r\n                return;\r\n            }\r\n\r\n            var handler = function(data){\r\n                //console.log(event + \"(\" + typeof(data) + \"):\" + (data? data.toString():\"null\"));\r\n                if(event != \"disconnect\" && typeof(data) == \"string\"){\r\n                    data = JSON.parse(data);\r\n                }\r\n                fn(data);\r\n            };\r\n            \r\n            this.handlers[event] = handler; \r\n            if(this.sio){\r\n                console.log(\"register:function \" + event);\r\n                this.sio.on(event,handler);\r\n            }\r\n        },\r\n        connect:function(fnConnect,fnError) {\r\n            var self = this;\r\n            \r\n            var opts = {\r\n                'reconnection':false,\r\n                'force new connection': true,\r\n                'transports':['websocket', 'polling']\r\n            }\r\n            this.sio = window.io.connect(this.ip,opts);\r\n            this.sio.on('reconnect',function(){\r\n                console.log('reconnection');\r\n            });\r\n            this.sio.on('connect',function(data){\r\n                self.sio.connected = true;\r\n                fnConnect(data);\r\n            });\r\n            \r\n            this.sio.on('disconnect',function(data){\r\n                console.log(\"disconnect\");\r\n                self.sio.connected = false;\r\n                self.close();\r\n            });\r\n            \r\n            this.sio.on('connect_failed',function (){\r\n                console.log('connect_failed');\r\n            });\r\n            \r\n            for(var key in this.handlers){\r\n                var value = this.handlers[key];\r\n                if(typeof(value) == \"function\"){\r\n                    if(key == 'disconnect'){\r\n                        this.fnDisconnect = value;\r\n                    }\r\n                    else{\r\n                        console.log(\"register:function \" + key);\r\n                        this.sio.on(key,value);                        \r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.startHearbeat();\r\n        },\r\n        \r\n        startHearbeat:function(){\r\n            this.sio.on('game_pong',function(){\r\n                console.log('game_pong');\r\n                self.lastRecieveTime = Date.now(); \r\n            });\r\n            this.lastRecieveTime = Date.now();\r\n            var self = this;\r\n            console.log(1);\r\n            if(!self.isPinging){\r\n                console.log(1);\r\n                self.isPinging = true;\r\n                setInterval(function(){\r\n                    console.log(3);\r\n                    if(self.sio){\r\n                        console.log(4);\r\n                        if(Date.now() - self.lastRecieveTime > 10000){\r\n                            self.close();\r\n                        }\r\n                        else{\r\n                            self.ping();\r\n                        }                        \r\n                    }\r\n                },5000);\r\n            }   \r\n        },\r\n        send:function(event,data){\r\n            if(this.sio.connected){\r\n                if(data != null && (typeof(data) == \"object\")){\r\n                    data = JSON.stringify(data);\r\n                    //console.log(data);              \r\n                }\r\n                this.sio.emit(event,data);                \r\n            }\r\n        },\r\n        \r\n        ping:function(){\r\n            this.send('game_ping');\r\n        },\r\n        \r\n        close:function(){\r\n            console.log('close');\r\n            if(this.sio && this.sio.connected){\r\n                this.sio.connected = false;\r\n                this.sio.disconnect();\r\n                this.sio = null;\r\n            }\r\n            if(this.fnDisconnect){\r\n                this.fnDisconnect();\r\n                this.fnDisconnect = null;\r\n            }\r\n        },\r\n        \r\n        test:function(fnResult){\r\n            var xhr = null;\r\n            var fn = function(ret){\r\n                fnResult(ret.isonline);\r\n                xhr = null;\r\n            }\r\n            \r\n            var arr = this.ip.split(':');\r\n            var data = {\r\n                account:cc.vv.userMgr.account,\r\n                sign:cc.vv.userMgr.sign,\r\n                ip:arr[0],\r\n                port:arr[1],\r\n            }\r\n            xhr = cc.vv.http.sendRequest(\"/is_server_online\",data,fn);\r\n            setTimeout(function(){\r\n                if(xhr){\r\n                    xhr.abort();\r\n                    fnResult(false);                    \r\n                }\r\n            },1500);\r\n            /*\r\n            var opts = {\r\n                'reconnection':false,\r\n                'force new connection': true,\r\n                'transports':['websocket', 'polling']\r\n            }\r\n            var self = this;\r\n            this.testsio = window.io.connect(this.ip,opts);\r\n            this.testsio.on('connect',function(){\r\n                console.log('connect');\r\n                self.testsio.close();\r\n                self.testsio = null;\r\n                fnResult(true);\r\n            });\r\n            this.testsio.on('connect_error',function(){\r\n                console.log('connect_failed');\r\n                self.testsio = null;\r\n                fnResult(false);\r\n            });\r\n            */\r\n        }\r\n    },\r\n});"
  ]
}